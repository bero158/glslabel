# coding: utf-8

"""
    MyGLS API

    API for MyGLS services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ParcelStatus(BaseModel):
    """
    ParcelStatus
    """ # noqa: E501
    depot_city: Optional[StrictStr] = Field(default=None, alias="DepotCity")
    depot_number: Optional[StrictStr] = Field(default=None, alias="DepotNumber")
    status_code: Optional[StrictStr] = Field(default=None, alias="StatusCode")
    status_date: Optional[StrictStr] = Field(default=None, alias="StatusDate")
    status_description: Optional[StrictStr] = Field(default=None, alias="StatusDescription")
    status_info: Optional[StrictStr] = Field(default=None, alias="StatusInfo")
    __properties: ClassVar[List[str]] = ["DepotCity", "DepotNumber", "StatusCode", "StatusDate", "StatusDescription", "StatusInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParcelStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if depot_city (nullable) is None
        # and model_fields_set contains the field
        if self.depot_city is None and "depot_city" in self.model_fields_set:
            _dict['DepotCity'] = None

        # set to None if depot_number (nullable) is None
        # and model_fields_set contains the field
        if self.depot_number is None and "depot_number" in self.model_fields_set:
            _dict['DepotNumber'] = None

        # set to None if status_description (nullable) is None
        # and model_fields_set contains the field
        if self.status_description is None and "status_description" in self.model_fields_set:
            _dict['StatusDescription'] = None

        # set to None if status_info (nullable) is None
        # and model_fields_set contains the field
        if self.status_info is None and "status_info" in self.model_fields_set:
            _dict['StatusInfo'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParcelStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DepotCity": obj.get("DepotCity"),
            "DepotNumber": obj.get("DepotNumber"),
            "StatusCode": obj.get("StatusCode"),
            "StatusDate": obj.get("StatusDate"),
            "StatusDescription": obj.get("StatusDescription"),
            "StatusInfo": obj.get("StatusInfo")
        })
        return _obj


