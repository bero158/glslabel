# coding: utf-8

"""
    MyGLS API

    API for MyGLS services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
import datetime
import time
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.address import Address
from openapi_client.models.service import Service
from typing import Optional, Set
from typing_extensions import Self

class Parcel(BaseModel):
    """
    Parcel
    """ # noqa: E501
    client_number: Optional[StrictInt] = Field(default=None, alias="ClientNumber")
    client_reference: Optional[StrictStr] = Field(default=None, alias="ClientReference")
    count: Optional[StrictInt] = Field(default=None, alias="Count")
    cod_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="CODAmount")
    cod_reference: Optional[StrictStr] = Field(default=None, alias="CODReference")
    cod_currency: Optional[StrictStr] = Field(default=None, alias="CODCurrency")
    content: Optional[StrictStr] = Field(default=None, alias="Content")
    pickup_date: Optional[StrictStr] = Field(default=None, alias="PickupDate")
    pickup_address: Optional[Address] = Field(default=None, alias="PickupAddress")
    delivery_address: Optional[Address] = Field(default=None, alias="DeliveryAddress")
    service_list: Optional[List[Optional[Service]]] = Field(default=None, alias="ServiceList")
    sender_identity_card_number: Optional[StrictStr] = Field(default=None, alias="SenderIdentityCardNumber")
    pickup_type: Optional[StrictInt] = Field(default=None, alias="PickupType")
    __properties: ClassVar[List[str]] = ["ClientNumber", "ClientReference", "Count", "CODAmount", "CODReference", "CODCurrency", "Content", "PickupDate", "PickupAddress", "DeliveryAddress", "ServiceList", "SenderIdentityCardNumber", "PickupType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Parcel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pickup_address
        if self.pickup_address:
            _dict['PickupAddress'] = self.pickup_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_address
        if self.delivery_address:
            _dict['DeliveryAddress'] = self.delivery_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in service_list (list)
        _items = []
        if self.service_list:
            for _item_service_list in self.service_list:
                if _item_service_list:
                    _items.append(_item_service_list.to_dict())
            _dict['ServiceList'] = _items
        # set to None if service_list (nullable) is None
        # and model_fields_set contains the field
        if self.service_list is None and "service_list" in self.model_fields_set:
            _dict['ServiceList'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Parcel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ClientNumber": obj.get("ClientNumber"),
            "ClientReference": obj.get("ClientReference"),
            "Count": obj.get("Count"),
            "CODAmount": obj.get("CODAmount"),
            "CODReference": obj.get("CODReference"),
            "CODCurrency": obj.get("CODCurrency"),
            "Content": obj.get("Content"),
            "PickupDate": obj.get("PickupDate"),
            "PickupAddress": Address.from_dict(obj["PickupAddress"]) if obj.get("PickupAddress") is not None else None,
            "DeliveryAddress": Address.from_dict(obj["DeliveryAddress"]) if obj.get("DeliveryAddress") is not None else None,
            "ServiceList": [Service.from_dict(_item) for _item in obj["ServiceList"]] if obj.get("ServiceList") is not None else None,
            "SenderIdentityCardNumber": obj.get("SenderIdentityCardNumber"),
            "PickupType": obj.get("PickupType")
        })
        return _obj


