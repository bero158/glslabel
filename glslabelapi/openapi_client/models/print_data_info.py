# coding: utf-8

"""
    MyGLS API

    API for MyGLS services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.parcel import Parcel
from typing import Optional, Set
from typing_extensions import Self

class PrintDataInfo(BaseModel):
    """
    PrintDataInfo
    """ # noqa: E501
    b2_c_char: Optional[StrictStr] = Field(default=None, alias="B2CChar")
    client_reference: Optional[StrictStr] = Field(default=None, alias="ClientReference")
    depot: Optional[StrictStr] = Field(default=None, alias="Depot")
    depot_number: Optional[StrictStr] = Field(default=None, alias="DepotNumber")
    displaylanguage: Optional[StrictStr] = Field(default=None, alias="Displaylanguage")
    driver: Optional[StrictStr] = Field(default=None, alias="Driver")
    parcel: Optional[Parcel] = Field(default=None, alias="Parcel")
    parcel_id: Optional[StrictInt] = Field(default=None, alias="ParcelId")
    parcel_number: Optional[StrictInt] = Field(default=None, alias="ParcelNumber")
    parcel_number_with_checkdigit: Optional[StrictInt] = Field(default=None, alias="ParcelNumberWithCheckdigit")
    sort: Optional[StrictStr] = Field(default=None, alias="Sort")
    __properties: ClassVar[List[str]] = ["B2CChar", "ClientReference", "Depot", "DepotNumber", "Displaylanguage", "Driver", "Parcel", "ParcelId", "ParcelNumber", "ParcelNumberWithCheckdigit", "Sort"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrintDataInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parcel
        if self.parcel:
            _dict['Parcel'] = self.parcel.to_dict()
        # set to None if b2_c_char (nullable) is None
        # and model_fields_set contains the field
        if self.b2_c_char is None and "b2_c_char" in self.model_fields_set:
            _dict['B2CChar'] = None

        # set to None if client_reference (nullable) is None
        # and model_fields_set contains the field
        if self.client_reference is None and "client_reference" in self.model_fields_set:
            _dict['ClientReference'] = None

        # set to None if depot (nullable) is None
        # and model_fields_set contains the field
        if self.depot is None and "depot" in self.model_fields_set:
            _dict['Depot'] = None

        # set to None if displaylanguage (nullable) is None
        # and model_fields_set contains the field
        if self.displaylanguage is None and "displaylanguage" in self.model_fields_set:
            _dict['Displaylanguage'] = None

        # set to None if sort (nullable) is None
        # and model_fields_set contains the field
        if self.sort is None and "sort" in self.model_fields_set:
            _dict['Sort'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrintDataInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "B2CChar": obj.get("B2CChar"),
            "ClientReference": obj.get("ClientReference"),
            "Depot": obj.get("Depot"),
            "DepotNumber": obj.get("DepotNumber"),
            "Displaylanguage": obj.get("Displaylanguage"),
            "Driver": obj.get("Driver"),
            "Parcel": Parcel.from_dict(obj["Parcel"]) if obj.get("Parcel") is not None else None,
            "ParcelId": obj.get("ParcelId"),
            "ParcelNumber": obj.get("ParcelNumber"),
            "ParcelNumberWithCheckdigit": obj.get("ParcelNumberWithCheckdigit"),
            "Sort": obj.get("Sort")
        })
        return _obj


