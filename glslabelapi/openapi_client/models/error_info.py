# coding: utf-8

"""
    MyGLS API

    API for MyGLS services

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error_info_error_code import ErrorInfoErrorCode
from typing import Optional, Set
from typing_extensions import Self

class ErrorInfo(BaseModel):
    """
    ErrorInfo
    """ # noqa: E501
    error_code: Optional[ErrorInfoErrorCode] = Field(default=None, alias="ErrorCode")
    error_description: Optional[StrictStr] = Field(default=None, alias="ErrorDescription")
    client_reference_list: Optional[List[StrictStr]] = Field(default=None, alias="ClientReferenceList")
    parcel_id_list: Optional[List[StrictInt]] = Field(default=None, alias="ParcelIdList")
    __properties: ClassVar[List[str]] = ["ErrorCode", "ErrorDescription", "ClientReferenceList", "ParcelIdList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ErrorInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error_code
        if self.error_code:
            _dict['ErrorCode'] = self.error_code.to_dict()
        # set to None if client_reference_list (nullable) is None
        # and model_fields_set contains the field
        if self.client_reference_list is None and "client_reference_list" in self.model_fields_set:
            _dict['ClientReferenceList'] = None

        # set to None if parcel_id_list (nullable) is None
        # and model_fields_set contains the field
        if self.parcel_id_list is None and "parcel_id_list" in self.model_fields_set:
            _dict['ParcelIdList'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ErrorInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ErrorCode": ErrorInfoErrorCode.from_dict(obj["ErrorCode"]) if obj.get("ErrorCode") is not None else None,
            "ErrorDescription": obj.get("ErrorDescription"),
            "ClientReferenceList": obj.get("ClientReferenceList"),
            "ParcelIdList": obj.get("ParcelIdList")
        })
        return _obj


